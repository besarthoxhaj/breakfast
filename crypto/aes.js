'use strict';

/**
 *
 *
 */
String.prototype.toBytes  = function() { return this.replace(/ /g, '').match(/(..?)/g).map(b => parseInt('0x'+b)); };
String.prototype.toWords  = function() { return this.split(/ /).map(w => w.match(/(..?)/g).map(b => parseInt('0x'+b))); };
Array.prototype.toByteStr = function() { return this.map(b => b.toString(16).padStart(2, '0')).join(' '); };
Array.prototype.toWordStr = function() { return this.map(w => w.map(b => b.toString(16).padStart(2, '0')).join('')).join(' '); };

/**
 *
 *
 */
class Aes {

  /**
   *
   *
   */
  static chiper(text, keySchedule) {

    const initKey = keySchedule[0];
    const initState = Aes.addRoundKey(text, initKey);
    console.log(`initKey.toBytesStr(): `, initKey.toByteStr());
    console.log(`initState.toByteStr():`, initState.toByteStr());

    const finalState = new Array(16).fill().reduce((acc, _, idx) => {
      const subBytes = Aes.subWord(acc);
      const shiftRows = Aes.shiftRows(subBytes);
      console.log(`subBytes.toByteStr(): `, subBytes.toByteStr());
      // const roundKey = Aes.addRoundKey();
    }, initState);
  }

  /**
   *
   *
   */
  static keyExpansion(key) {

    const matrix = [4, 4];
    const rounds = 10;
    const store = new Array(4*10).fill();

    const output = store.reduce((acc, _, idx) => {

      const isFirstBlock = ((idx % 4) === 0);
      const numRoundBlock = Math.trunc(idx / 4);
      const currCol = acc.slice(-4);
      const lastCol = acc.slice(-16, -12);

      if (isFirstBlock) {
        const rotWordOut = Aes.rotWord(currCol);
        const subBytes = Aes.subWord(rotWordOut);
        const xOrExec = (elm, idx) => (elm ^ subBytes[idx]) ^ Aes.rCon[numRoundBlock][idx];
        const xOrRes = lastCol.map(xOrExec);
        // console.log(`currCol:                `, currCol.toByteStr());
        // console.log(`rotWordOut:             `, rotWordOut.toByteStr());
        // console.log(`acc.slice(-16, -12):    `, acc.slice(-16, -12).toByteStr());
        // console.log(`subBytes:               `, subBytes.toByteStr());
        // console.log(`Aes.rCon[numRoundBlock]:`, Aes.rCon[numRoundBlock].toByteStr());
        // console.log(`xOrRes:                 `, xOrRes.toByteStr());
        // console.log(`acc:                    `, acc.toByteStr());
        return acc.concat(xOrRes);
      }

      const nextCol = lastCol.map((elm, idx) => elm ^ currCol[idx]);
      return acc.concat(nextCol);
    }, [...key]);

    return Aes.group(output, 16);
  }

  /**
   *
   *
   */
  static group(inputArray, size) {

    return inputArray.reduce((acc, elm, idx) => {
      const currIdx = Math.trunc(idx / size);
      acc[currIdx] = (acc[currIdx] || []).concat(elm);
      return acc;
    }, []);
  }

  /**
   *
   *
   */
  static addRoundKey(state, key) {
    const xOr = (elm, idx) => elm ^ key[idx];
    return state.map(xOr);
  }

  /**
   *
   *
   */
  static subWord(w) {
    return w.map(elm => Aes.sBox[elm]);
  }

  /**
   *
   *
   */
  static shiftRows(w) {
    console.log(`w.toByteStr()`, w.toByteStr());
    const getRow = inputArr => inputArr.filter((_, idx) => !(idx % 4));
    const matrix = new Array(4).fill().map((_, idx) => getRow(Aes.rotWord(w, idx)));
    const rotMatrix = matrix.map((sub, idx) => Aes.rotWord(sub, idx));
    console.log(`a`, a);
  }

  /**
   *
   *
   */
  static rotWord(w, size=1) {
    const init = w.slice(0, size);
    const end = w.slice(size);
    return end.concat(init);
  }
}

/**
 * Length: 256
 *
 */
Aes.sBox = [
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

/**
 * Length: 10
 *
 */
Aes.rCon = [
  // [ 0x00, 0x00, 0x00, 0x00 ],
  [ 0x01, 0x00, 0x00, 0x00 ],
  [ 0x02, 0x00, 0x00, 0x00 ],
  [ 0x04, 0x00, 0x00, 0x00 ],
  [ 0x08, 0x00, 0x00, 0x00 ],
  [ 0x10, 0x00, 0x00, 0x00 ],
  [ 0x20, 0x00, 0x00, 0x00 ],
  [ 0x40, 0x00, 0x00, 0x00 ],
  [ 0x80, 0x00, 0x00, 0x00 ],
  [ 0x1b, 0x00, 0x00, 0x00 ],
  [ 0x36, 0x00, 0x00, 0x00 ],
];

/**
 * Length: 4
 *
 */
Aes.mix = [
  [ 0x02, 0x03, 0x01, 0x01 ],
  [ 0x01, 0x02, 0x03, 0x01 ],
  [ 0x01, 0x01, 0x02, 0x03 ],
  [ 0x03, 0x01, 0x01, 0x02 ],
];

/**
 *
 *
 */
const myText = '32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34';
const key128 = '2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c';

const keySchedule = Aes.keyExpansion(key128.toBytes());
const chiperText = Aes.chiper(myText.toBytes(), keySchedule);
// console.log(`keySchedule`, keySchedule);

// function shiftArray(array, size) {
//   const currInit = array.slice(0, size);
//   const currEnd = array.slice(size);
//   return currEnd.concat(currInit);
// }

const a = [
   'x1',  'x2',  'x3',  'x4',
   'x5',  'x6',  'x7',  'x8',
   'x9', 'x10', 'x11', 'x12',
  'x13', 'x14', 'x15', 'x16',
];
// const b = a.filter((_, idx) => !(idx % 4));
// console.log(`b`, shiftArray(a, 2));
